import SoapySDR
from SoapySDR import *  # SOAPY_SDR_ constants
import numpy as np
import time
import statistics
import os
import requests
from datetime import datetime
import RPi.GPIO as GPIO


pin = 17
pin_led = 27
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(pin, GPIO.OUT)
GPIO.setup(pin_led, GPIO.OUT, initial=GPIO.LOW)


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã HackRF
SAMPLE_RATE = 10000000
GAIN = 100
SAMPLES_PER_READ = 8192
SERIAL_NUMBER = None

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
# === –ü–æ—Ä–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º) ===
BASE_THRESHOLD = 2      # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –≤ dB (–ø—Ä–∏ —á–∏—Å—Ç–æ–º —ç—Ñ–∏—Ä–µ)
MAX_THRESHOLD = 10      # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
ADAPTIVE = True         # –≤–∫–ª—é—á–∞–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é
THRESHOLD_DELTA = 3

STEP = 10_000_000
LISTEN_DURATION = 2

# –ß–∞—Å—Ç–æ—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (—Ü–µ–Ω—Ç—Ä, —Ä–∞–∑–±—Ä–æ—Å)
FREQUENCY_RANGES = [
    (902_000_000, 928_000_000, 3),
    (2_400_000_000, 2_480_000_000, 3),
    (1_070_000_000, 1_370_000_000, 3),
    (2_400_000_000, 2_480_000_000, 3),
    (5_725_000_000, 5_875_000_000, 3),
]


os.makedirs("logs", exist_ok=True)
log_filename = datetime.now().strftime("logs/log_%Y-%m-%d_%H-%M-%S.txt")

def setup_sdr():
    while True:
        try:
            
            print("üîå –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ HackRF...")
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            devices = SoapySDR.Device.enumerate({'driver': 'hackrf'})
            
            if len(devices) == 0:
                raise Exception("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ HackRF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            
            if SERIAL_NUMBER:
                print(f"üîå –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º: {SERIAL_NUMBER}")
                device_found = None
                for dev in devices:
                    if dev['serial'] == SERIAL_NUMBER:
                        device_found = dev
                        break
                if device_found is None:
                    raise Exception(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {SERIAL_NUMBER} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                print(f"üîå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {SERIAL_NUMBER} –Ω–∞–π–¥–µ–Ω–æ.")
                sdr = SoapySDR.Device(device_found)
            else:
                
                print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ HackRF.")
                
                sdr = SoapySDR.Device(devices[0])
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            sdr.setSampleRate(SOAPY_SDR_RX, 0, SAMPLE_RATE)
            sdr.setGain(SOAPY_SDR_RX, 0, GAIN)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
            
            print(f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ HackRF: {sdr.getHardwareInfo()['serial']}")
            return sdr
        except Exception as e:
            
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ HackRF: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)

def measure_signal_power(sdr, center_freq):
    sdr.setFrequency(SOAPY_SDR_RX, 0, center_freq)
    rxStream = sdr.setupStream(SOAPY_SDR_RX, SOAPY_SDR_CF32)
    sdr.activateStream(rxStream)

    buff = np.empty(SAMPLES_PER_READ, np.complex64)
    sr = sdr.readStream(rxStream, [buff], len(buff), timeoutUs=1000000)
    sdr.deactivateStream(rxStream)
    sdr.closeStream(rxStream)

    if sr.ret > 0:
        # FFT –≤–Ω—É—Ç—Ä–∏ 10 –ú–ì—Ü –ø–∞–∫–µ—Ç–∞
        data = buff[:sr.ret]
        fft = np.fft.fftshift(np.fft.fft(data))
        psd = 10 * np.log10(np.abs(fft)**2 + 1e-12)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º –≤ —ç—Ç–æ–º —Å–ø–µ–∫—Ç—Ä–µ
        max_power = np.max(psd)
        return max_power
    else:
        return None

def live_listen(sdr, frequency, median_noise, duration=2):
    print(f"\n‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ {frequency//1_000_000} MHz –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
    end_time = time.time() + duration
    signal_above_threshold = 0
    for _ in range(10):
        
        power = measure_signal_power(sdr, frequency)
        if power is not None:
            print(f"  {frequency//1_000_000} MHz: {power:.2f} dBFS")
            if power - median_noise > THRESHOLD_DELTA:  # <-- —Ñ–∏–∫—Å —Ç—É—Ç
                signal_above_threshold += 1
        else:
            print(f"  {frequency//1_000_000} MHz: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è")
        time.sleep(0.2)
    return signal_above_threshold

def adai(pin=17):
    """–ò—Å–ø–æ–ª–Ω—è–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫—é—è '–ê–¥–∞–π' –Ω–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–º –±—É–∑–∑–µ—Ä–µ."""
    pwm = GPIO.PWM(pin, 440)  # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞

    # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç "–ê–¥–∞–π" ‚Äî –¥–∏–Ω–∞–º–∏—á–Ω—ã–π –∏ —É–∑–Ω–∞–≤–∞–µ–º—ã–π —Ä–∏—Ç–º
    melody = [
        (659, 0.18), (880, 0.12), (987, 0.18), (880, 0.12),
        (784, 0.18), (659, 0.18), (880, 0.25), (0, 0.12),
        (987, 0.18), (1046, 0.18), (987, 0.12), (880, 0.25),
        (784, 0.15), (880, 0.12), (659, 0.25)
    ]

    try:
        print("üéµ –ò—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è '–ê–¥–∞–π' (—Ñ—Ä–∞–≥–º–µ–Ω—Ç)...")
        pwm.start(50)
        for freq, dur in melody:
            if freq == 0:
                pwm.ChangeDutyCycle(0)  # –ø–∞—É–∑–∞
            else:
                pwm.ChangeDutyCycle(50)
                pwm.ChangeFrequency(freq)
            time.sleep(dur)
        pwm.stop()
    finally:
        pass

def signal_it():
    print("–°–∏–≥–Ω–∞–ª!!!")
    pwm = GPIO.PWM(pin, 2000)  # —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –±—É–∑–∑–µ—Ä–∞ (2 –∫–ì—Ü)

    try:
        for _ in range(3):
            GPIO.output(pin_led, GPIO.HIGH)  # –≤–∫–ª—é—á–∏—Ç—å LED
            pwm.start(50)                    # 50% duty cycle (–∑–≤—É–∫)
            time.sleep(0.25)                 # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∏—Å–∫–∞

            pwm.ChangeDutyCycle(0)           # –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è PWM
            GPIO.output(pin_led, GPIO.LOW)   # –≤—ã–∫–ª—é—á–∏—Ç—å LED
            time.sleep(0.15)                 # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∏—Å–∫–∞–º–∏
    finally:
        pwm.stop()
        GPIO.output(pin_led, GPIO.LOW)


def scan_frequency_range(sdr, center_freq, spread, threshold):
    start_freq = center_freq
    end_freq = spread
    readings = {}

    print(f"\n–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {start_freq//1_000_000}-{end_freq//1_000_000} MHz...")

    for freq in range(start_freq, end_freq + 1, STEP):
        strength = measure_signal_power(sdr, freq)
        if strength is not None:
            readings[freq] = strength
            print(f"{freq//1_000_000} MHz: {strength:.2f} dBFS")

            if len(readings) >= 3:
                median_noise = statistics.median(list(readings.values()))

                # === –ê–î–ê–ü–¢–ò–í–ù–´–ô –ü–û–†–û–ì ===
                noise_spread = max(readings.values()) - min(readings.values())
                dynamic_threshold = BASE_THRESHOLD + min(noise_spread / 2, MAX_THRESHOLD - BASE_THRESHOLD)
                dynamic_threshold = round(dynamic_threshold, 2)

                # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ ===
                if strength - median_noise > dynamic_threshold:
                    print(f"‚öôÔ∏è –ü–æ—Ä–æ–≥ —à—É–º–∞ {median_noise:.2f} dBFS, Œî={strength - median_noise:.2f} > {dynamic_threshold:.2f}")
                    signal_above_threshold = live_listen(sdr, freq, median_noise, LISTEN_DURATION)
                    print(f"üìä –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞: {signal_above_threshold} —Ä–∞–∑")

                    if signal_above_threshold >= threshold:
                        print(f"üö® –ù–∞–ª–∏—á–∏–µ –¥—Ä–æ–Ω–∞ –Ω–∞ —á–∞—Å—Ç–æ—Ç–µ {freq//1_000_000} MHz!")
                        signal_it()

                        # === –¶–∏–∫–ª –¥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ ===
                        while True:
                            power_check = measure_signal_power(sdr, freq)
                            if power_check is None:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è {freq//1_000_000} MHz")
                                break

                            diff = power_check - median_noise
                            print(f"üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ {freq//1_000_000} MHz: {power_check:.2f} dBFS (Œî={diff:.2f})")

                            if diff > dynamic_threshold:
                                print("üì° –î—Ä–æ–Ω –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω...")
                                signal_it()
                                time.sleep(1)
                            else:
                                print("‚úÖ –°–∏–≥–Ω–∞–ª –¥—Ä–æ–Ω–∞ –∏—Å—á–µ–∑.")
                                break
                        
                        # –ü–æ—Å–ª–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        else:
            print(f"{freq//1_000_000} MHz: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞")

        time.sleep(0.2)

    return readings


def log_detection(freq, level):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_line = f"[{timestamp}] –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—Ä–æ–Ω –Ω–∞ —á–∞—Å—Ç–æ—Ç–µ: {freq / 1e9:.3f} GHz. {level:.2f} dBFS.\n"
    # with open(log_filename, "a") as f:
    #     f.write(log_line)

def main():
        
    try:        
        

        sdr = setup_sdr()

        adai()
        
        while True:
            for center, spread, threshold in FREQUENCY_RANGES:
                readings = scan_frequency_range(sdr, center, spread, threshold)

            print("\n\n\n\n\n")
    except:
        GPIO.cleanup()
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        raise

if __name__ == '__main__':
    main()
